linear data structure-where data elements are arranged sequentially, 
meaning each element is connected to its previous and next elements

stores data in nodes which are connected by pointers

NOT stored in contiguous memory-a blocked of memory where
data is stored sequential,adjacent locations
the memory for a particular process or data structure is allocated as a single,
unbroken chunk,rather than being scattered across the memory space. 

can only be accessed sequentially, starting from the head of list.

used to implement other data structures like stack,
queue and deque

insertion and deletion is efficient than array

Linked List:
Data Structure: Non-contiguous
Memory Allocation: Typically allocated one by one to individual elements
Insertion/Deletion: Efficient
Access: Sequential

Array:
Data Structure: Contiguous
Memory Allocation: Typically allocated to the whole array
Insertion/Deletion: Inefficient
Access: Random


- each node contains a data field and a         
reference to the next node in the linked list
- The next of the last node is null

doubly linked list---> each node in the list contains a pointer to the 
previous node and a pointer to the next node. 

This allows for quick and easy insertion and deletion of nodes from the 
list, as well as efficient traversal of the list in both directions.
